#!/usr/bin/env perl

=head1 NAME

transpose - transpose a field-delimited file

=head1 SYNOPSIS

    transpose [options] [file]

=head1 DESCRIPTION

The script is intended for transforming an input file transposing rows and 
columns. Each row is assumed consists of set of substrings delimited by 
the B<input-field-separator> (space or C<TAB>). After transposing rows 
become columns and columns become rows. Empty fields are assumed as 
substrings of zero length. 

By default, leading and trailing B<input-field-separator> are not removed. 
The proper options should be specified to remove them. 

=head1 OPTIONS

=over 4

=item B<--version>

Print the program version and exit.

=item B<-F> I<PATTERN>, B<--input-field-separator=>I<PATTERN>

Regexp to detect input field separator. By default is C<[ \t]>,

=item B<-R> I<PATTERN>, B<--input-record-separator=>I<PATTERN>

Regexp to detect input record separator. By default is C<\r\n|\r|\n>,

=item B<-n> I<LIMIT>, B<--limit=>I<LIMIT>

If LIMIT is specified and positive, it represents the maximum number of 
fields the input record will be split into. 

If LIMIT is zero, trailing null fields are stripped (which potential users 
of "pop" would do well to remember). 

If LIMIT is negative, it is treated as if an arbitrarily large LIMIT had 
been specified. 

=item B<--ltrim>, B<--rtrim>, B<--trim>

Remove field separators on left, right or both sides of an input record.

=item B<-f> I<PATTERN>, B<--output-field-separator=>I<PATTERN>

The output field separator. The default value is space.

=item B<-r> I<PATTERN>, B<--output-record-separator=>I<PATTERN>

The output record separator. The default value is newline.

=back

=head1 SEE ALSO

perlre(1)

L<https://stackoverflow.com/q/1729824/3627676>

L<http://www.perlmonks.org/?node_id=1162532>

=head1 COPYRIGHT

Copyright 2017-2021, Ildar Shaimordanov

  MIT License

=cut

# =========================================================================

use strict;
use warnings;

use Pod::Usage;
use Getopt::Long qw( :config no_ignore_case bundling auto_version );

our $VERSION = "0.2";

my %cfg = (
	ltrim => 0, 
	rtrim => 0, 
	limit => -1, 
	ifs => qr/[ \t]/, 
	irs => qr/\r\n|\r|\n/, 
	ofs => " ", 
	ors => $/, 
);

# =========================================================================

pod2usage unless GetOptions(
	"h|help" => sub {
		pod2usage({
			-verbose => 2, 
			-noperldoc => 1, 
		});
	}, 

	"F|input-field-separator=s" => \$cfg{ifs}, 
	"R|input-record-separator=s" => \$cfg{irs}, 

	"n|limit=i" => \$cfg{limit}, 

	"ltrim" => \$cfg{ltrim}, 
	"rtrim" => \$cfg{rtrim}, 
	"trim" => sub { $cfg{ltrim} = $cfg{rtrim} = 1; }, 

	"f|output-field-separator=s" => sub {
		$cfg{ofs} = eval '"' . $_[1] . '"';
	}, 
	"r|output-record-separator=s" => sub {
		$cfg{ors} = eval '"' . $_[1] . '"';
	}, 
);

pod2usage({ -verbose => 2, -noperldoc => 1 }) if ! @ARGV && -t 0;

# =========================================================================

sub validate_re {
	my ( $v, $k ) = ( shift, shift );
	my $re = eval { qr/$v/ };
	die "Bad regexp: $k = $v\n" if $@;
	$re;
}

$cfg{ifs} = validate_re $cfg{ifs}, "input-field-separator";
$cfg{irs} = validate_re $cfg{irs}, "input-record-separator";

#use Data::Dumper;
#print Dumper \%cfg;

# =========================================================================

my @data = ();
my $maxcol = -1;

sub parse_rec {
	foreach ( @_ ) {
		s/$cfg{ifs}+$// if $cfg{rtrim};
		s/^$cfg{ifs}+// if $cfg{ltrim};

		my @row = split /$cfg{ifs}/, $_, $cfg{limit};
		$maxcol = $#row if $#row > $maxcol;

		push @data, \@row;
	}
}

my $prev_tail = "";

while ( <> ) {
	my @recs = split $cfg{irs}, "$prev_tail$_";
	$prev_tail = pop @recs if @recs > 1;

	parse_rec @recs;
}

parse_rec $prev_tail if $prev_tail;

# =========================================================================

$\ = $cfg{ors};
$, = $cfg{ofs};

for (my $i = 0; $i <= $maxcol; $i++) {
	my @row = map { defined $_->[$i] ? $_->[$i] : "" } @data;
	print @row;
}

# =========================================================================

# EOF
