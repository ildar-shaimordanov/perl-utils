#!/usr/bin/env perl

=head1 NAME

paragrep - grep-like filter for searching matches in paragraphs

=head1 SYNOPSIS

    paragrep --help
    paragrep OPTIONS

=head1 DESCRIPTION

paragrep assumes the input consists of paragraphs and prints the
paragraphs matching a pattern. By default, the paragraph is identified
as the text block delimited by empty or blank lines.

=head1 OPTIONS

=head2 Generic Program Information

=over 4

=item B<-h>, B<--help>

Print this help message and exit.

=item B<--version>

Print the program version and exit.

=item B<--debug>

Print debug information and exit.

=back

=head2 Paragraph Matching Control

=over 4

=item B<-p> I<PATTERN>, B<--break-of-paragraph=>I<PATTERN>

Use I<PATTERN> as the pattern to identify the break of paragraphs. By
default, this value is C<^\s*$>. The break of paragraphs is considered
as the separator and excluded from the output.

=item B<-P>, B<--begin-of-paragraph>

If this option is specified in the command line, the meaning of the
option B<-p> is modified to identify the first line of the paragraph
which is considered as the part of a paragraph.

=back

=head2 Matching Control

=over 4

=item B<-e> I<PATTERN>, B<--regexp=>I<PATTERN>

Use I<PATTERN> as the pattern. This can be used to specify multiple
search patterns, or to protect a pattern beginning with a hyphen (I<->).

This option can be specified multiple times or omitted for briefness.

=item B<-f> I<FILE>, B<--file=>I<FILE>

Obtain patterns from I<FILE>, one per line.

=item B<-i>, B<--ignore-case>

Ignore case distinctions in both the I<PATTERN> and the input files.

=item B<-v>, B<--invert-match>

Invert the sense of matching, to select non-matching paragraphs.

=item B<-w>, B<--word-regexp>

Select only those paragraphs containing matches that form whole words. The
test is that the matching substring must either be at the beginning of the
line of each paragraphs, or preceded by a non-word constituent character.
Similarly, it must be either at the end of the line of each paragraphs or
followed by a non-word constituent character. Word-constituent characters
are letters, digits, and the underscore.

=back

=head2 Output Control

=over 4

=item B<-n>, B<--line-number>

Prefix each output line with the line number within its input file.

=item B<-H>, B<--with-filename>

Prefix each output line with the file name. This is the default when
there is more than one file.

=item B<-h>, B<--no-filename>

Suppress the prefixing of file names on output. This is the default when
there is the only file or only standard input.

=back

=head2 Multiple Matching Control

=over 4

=item B<-A>, B<--and>

=item B<-O>, B<--or>

These options specify whether multiple search patterns specified by the
I<-e> options should be logically I<AND>ed together or logically I<OR>ed
together. If not specified, the patterns are assumed logically I<OR>ed.

These options can be used to simplify the commands searching for matches
to multiple patterns. More than one of them can be specified but the
only last pattern has affect.

=back

=head1 EXAMPLES

=head2 Example

The following example demonstrates the customized paragraph definition
for parsing log files. Usually, applications producing log files write
one log entry per one line. Somethimes applications (especially written
in Java) produce multiline log entries. Each log entry begins with the
timestamp in the generalized form C<date time>, which can be covered by
the pattern C<\d+/\d+/\d+ \d+:\d+:\d+> without reflecting on which date
format has been used to output dates:

    paragrep -Pp '^\d+/\d+/\d+ \d+:\d+:\d+' PATTERN FILENAME

=head2 Example

In the following example it is considered that paragraphs begin with C<[>
(similar to INI files) with the optional prefix C<#@ > or C<#-E<gt> >.

    paragrep -Pp '^(#@ |#-> )?\[' PATTERN FILENAME

=head2 Example

The example below demonstrates how C<paragrep> can imitate behaviour of
the standard C<grep>:

    paragrep -Pp '\n' PATTERN FILENAME

=head2 Example

The following example shows how the combining option simplifies usage. The
resulting output will consist of the paragraphs matching both I<PATTERN1>
and I<PATTERN2>.

    cat FILENAME | paragrep -e PATTERN1 -e PATTERN2 -A
    cat FILENAME | paragrep -e PATTERN1 | paragrep -e PATTERN2

=head1 SEE ALSO

L<paragrep in Python|https://github.com/bmc/paragrep>

L<paragrep in Haskell|https://github.com/rrnewton/paragrep>

L<Ack|https://beyondgrep.com/>

L<greple|https://github.com/kaz-utashiro/greple>

L<Example from Perl Cookbook, Chapter 6|https://resources.oreilly.com/examples/9780596003135/blob/master/cookbook.examples/ch06/paragrep>

grep(1)

perlre(1)

=head1 COPYRIGHT

Copyright 2017-2021, Ildar Shaimordanov

  MIT License

=cut

# =========================================================================

use strict;
use warnings;

no warnings "utf8";
use open qw( :std :utf8 );

use Pod::Usage;
use Getopt::Long qw( :config no_ignore_case bundling auto_version );

our $VERSION = "0.6.3";

my $debug;

my $break_of_para = '^\\s*$';
my $begin_of_para = 0;

my $ignore_case = 0;
my $invert_match = 0;
my $word_regexp = 0;
my $line_number = 0;
my $with_filename;
my $regexp_anded = 0;

my @patterns = ();
my @patterns_files = ();
my @regexps;

my @globs = ();
my @files = ();

# =========================================================================

pod2usage unless GetOptions(
	"help" => sub {
		pod2usage({
			-verbose => 2,
			-noperldoc => 1,
		});
	},
	"debug" => \$debug,

	"p|break-of-paragraph=s" => \$break_of_para,
	"P|begin-of-paragraph"   => \$begin_of_para,

	"e|regexp=s" => \@patterns, 
	"f|file=s"   => \@patterns_files,

	"i|ignore-case"  => \$ignore_case,
	"v|invert-match" => \$invert_match,
	"w|word-regexp"  => \$word_regexp,

	"n|line-number"   => \$line_number,
	"H|with-filename" => sub { $with_filename = 1; },
	"h|no-filename"   => sub { $with_filename = 0; },

	"A|and" => sub { $regexp_anded = 1; },
	"O|or"  => sub { $regexp_anded = 0; },

	"<>" => sub { push @globs, $_[0]; },
);

# =========================================================================

sub validate_re {
	my ( $v, $k, $ignore_case, $word_regexp ) = @_;
	$v = "\\b($v)\\b" if $word_regexp;
	my $re = eval { $ignore_case ? qr/$v/im : qr/$v/m };
	die "Bad regexp: $k = $v\n" if $@;
	$re;
}

foreach my $file ( @patterns_files ) {
	open FILE, $file or die "Unable to open file: $file\n";
	push @patterns, map { chomp; $_ } <FILE>;
	close FILE;
}

# If no patterns, assume the first item of the list is the pattern
push @patterns, shift @globs if ! @patterns && @globs;

# Validate all the patterns and create the valid regexps
pod2usage unless @patterns;
@regexps = map { validate_re $_, "pattern", $ignore_case, $word_regexp } @patterns;

# Expand filename patterns
@files = map { glob } @globs;

# If the list of files is empty, assume reading from STDIN
push @files, "-" unless @files;

# Validate and setup the pattern identifying paragraphs
$break_of_para = validate_re $break_of_para, "break-of-paragraph";

# =========================================================================

# Set with filename only if @files > 1 and "-h" not specifed
$with_filename //= 1 if @files > 1;

# =========================================================================

if ( $debug ) {
	local $" = "\n    ";
	my $with_filename_value = $with_filename // "undef";
	warn <<DATA;
FILES
    @files

PARAGRAPH MATCHING CONTROL
    break-of-paragraph = $break_of_para
    begin-of-paragraph = $begin_of_para

MATCHING CONTROL
    ignore-case   = $ignore_case
    word-regexp   = $word_regexp
    invert-match  = $invert_match
    regexp_anded  = $regexp_anded
    regexps       = @regexps

OUTPUT CONTROL
    line-number   = $line_number
    with-filename = $with_filename_value

MULTIPLE MATCHING CONTROL
    regexp-anded  = $regexp_anded
DATA
	exit;
}

# =========================================================================

# There are two main reasons why I entered these functions here:
# -- support older Perl instances (at least 5.16 and earlier)
# -- avoid extra dependencies on other external modules
#
# The functions are parts of the core module List::Util since 1.33. Also
# they are parts of the external module List::MoreUtils for long time.
#
# The implementation of the functions below were borrowed from the source
# code of List::MoreUtils with minimal cosmetic changes.

sub any(&@) {
	my $f = shift;
	foreach (@_) {
		return 1 if $f->();
	}
	return 0;
}

sub all(&@) {
	my $f = shift;
	foreach (@_) {
		return 0 unless $f->();
	}
	return 1;
}

sub none(&@) {
	my $f = shift;
	foreach (@_) {
		return 0 if $f->();
	}
	return 1;
}

sub notall(&@) {
	my $f = shift;
	foreach (@_) {
		return 1 unless $f->();
	}
	return 0;
}

# =========================================================================

my $matcher = $regexp_anded 
	? ( $invert_match ? \&notall : \&all ) 
	: ( $invert_match ? \&none   : \&any );

# =========================================================================

my $para;

sub print_para {
	print $para if defined $para && &$matcher(sub { $para =~ $_ }, @regexps);
	$para = "";
}

# =========================================================================

$| = 1;

foreach my $file ( @files ) {
	open FILE, $file or do {
		warn "Unable to read file: $file\n";
		next;
	};

	$file = "(standard input)" if $file eq "-";

	while ( <FILE> ) {
		if ( m/$break_of_para/ ) {
			print_para;
			next unless $begin_of_para;
		}
		$_ = "$.:$_" if $line_number;
		$_ = "$file:$_" if $with_filename;
		$para .= $_;
	}

	print_para if $para;

	close FILE;
}

# =========================================================================

# EOF
